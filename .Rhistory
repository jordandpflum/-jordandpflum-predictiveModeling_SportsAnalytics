simreg_indus <- lm(crim ~ indus, data = Boston)
ggplotRegression(simreg_indus)
summary(simreg_indus)
indus_res <- resid(simreg_indus)
plot(Boston$indus, indus_res)
abline(0,0)
# NOX VS CRIM
simreg_nox <- lm(crim ~ nox, data = Boston)
ggplotRegression(simreg_nox)
summary(simreg_nox)
#RM VS CRIM
simreg_rm <- lm(crim ~ rm, data = Boston)
ggplotRegression(simreg_rm)
summary(simreg_rm)
#AGE VS CRIM
simreg_age <- lm(crim ~ age, data = Boston)
ggplotRegression(simreg_age)
summary(simreg_age)
#DIS VS CRIM
simreg_dis <- lm(crim ~ dis, data = Boston)
ggplotRegression(simreg_dis)
summary(simreg_dis)
#RAD VS CRIM
simreg_rad <- lm(crim ~ rad, data = Boston)
ggplotRegression(simreg_rad)
summary(simreg_rad)
#RAD VS CRIM
simreg_rad <- lm(crim ~ tax, data = Boston)
ggplotRegression(simreg_tax)
summary(simreg_tax)
#TAX VS CRIM
simreg_tax <- lm(crim ~ tax, data = Boston)
ggplotRegression(simreg_tax)
summary(simreg_tax)
#CHAS VS CRIM
simreg_chas <- lm(crim ~ chas, data = Boston)
ggplotRegression(simreg_chas)
summary(simreg_chas)
#PTRATIO VS CRIM
simreg_pt <- lm(crim ~ ptratio, data = Boston)
ggplotRegression(simreg_pt)
summary(simreg_pt)
#BLACK VS CRIM
simreg_blk <- lm(crim ~ black, data = Boston)
ggplotRegression(simreg_blk)
summary(simreg_blk)
#LSTAT VS CRIM
simreg_ls <- lm(crim ~ lstat, data = Boston)
ggplotRegression(simreg_ls)
summary(simreg_ls)
#MEDV VS CRIM
simreg_medv <- lm(crim ~ medv, data = Boston)
ggplotRegression(simreg_medv)
summary(simreg_medv)
manyreg <- lm(crim ~ zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat + medv, data=Boston)
summary(manyreg)
simpreg <- vector("numeric",0)
simpreg <- c(simpreg, simreg_zm$coefficient[2])
simpreg <- c(simpreg, simreg_indus$coefficient[2])
simpreg <- c(simpreg, simreg_chas$coefficient[2])
simpreg <- c(simpreg, simreg_nox$coefficient[2])
simpreg <- c(simpreg, simreg_rm$coefficient[2])
simpreg <- c(simpreg, simreg_age$coefficient[2])
simpreg <- c(simpreg, simreg_dis$coefficient[2])
simpreg <- c(simpreg, simreg_rad$coefficient[2])
simpreg <- c(simpreg, simreg_tax$coefficient[2])
simpreg <- c(simpreg, simreg_pt$coefficient[2])
simpreg <- c(simpreg, simreg_blk$coefficient[2])
simpreg <- c(simpreg, simreg_ls$coefficient[2])
simpreg <- c(simpreg, simreg_medv$coefficient[2])
manreg <- vector("numeric", 0)
manreg <- c(manreg, manyreg$coefficients)
manreg <- manreg[-1]
plot(simreg, manreg, col = "blue")
plot(simpreg, manreg, col = "blue")
plot(simpreg, manreg)
plot(simpreg, manreg, xlab = "Simple Linear Regression", ylab = "Multiple Linear Regression")
plot(simpreg, manreg, xlab = "Simple Linear Regression", ylab = "Multiple Linear Regression", main = "Comparison of Regression Success")
plot(simpreg, manreg, xlab = "Simple Linear Regression", ylab = "Multiple Linear Regression", main = "Comparison of Regression Results")
summary(simreg_zm)$adj.r.squared
indus_res <- resid(simreg_indus)
plot(Boston$indus, indus_res)
abline(0,0)
cor(Boston[-c(1, 4)])
View(Boston)
View(Boston)
Boston[-c(1, 4)]
help(Boston)
?Boston
help(?Boston)
help(boston)
??Boston
reg.bos <- function(columns){
attach(Boston)
reg <- lm(crim ~ poly(columns,3))
summary(reg)
}
reg.bos(zn)
#THIS WORKS-----------------DENSITY PLOT WITH MEAN LINES------------------
#calc mean for each group
lildata <- ddply(DATA, "Pos", summarise, grp.mean=mean(Age))
library(ggplot2)
library(plyr)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
setwd("~/Documents/UT MSBA 2020-21/RStudioWorkingDirectory/Predictive Modeling/predictiveModelingSportsAnalytics")
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
install.packages("docstring")
library(docstring)
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18 - 22')
ageGroupedDataframe_23_26 <- createAgeGroupingDataframe(completeDataframe, ageGroup='23 - 26')
ageGroupedDataframe_27_30 <- createAgeGroupingDataframe(completeDataframe, ageGroup='27 - 30')
ageGroupedDataframe_31_35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='31 - 35')
ageGroupedDataframe_over35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='>35')
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
# Create Y-DF
variables = c("Salary")
yDF = createParitalDataframe(df = completeDataframe, colNames = variables)
# Prediction
source("Prediction/predictions_based_on_position.R")
player_csv <- cleanPlayerSalary(completeDataframe)
# Prediction
source("Prediction/predictions_based_on_position.R")
rm(list=ls())
library(docstring)
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
# Grouping
# Gruping by Position
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18 - 22')
ageGroupedDataframe_23_26 <- createAgeGroupingDataframe(completeDataframe, ageGroup='23 - 26')
ageGroupedDataframe_27_30 <- createAgeGroupingDataframe(completeDataframe, ageGroup='27 - 30')
ageGroupedDataframe_31_35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='31 - 35')
ageGroupedDataframe_over35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='>35')
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
# Create Y-DF
variables = c("Salary")
yDF = createParitalDataframe(df = completeDataframe, colNames = variables)
View(completeDataframe)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary)
playerSalaryData<-read.csv("Data/PlayerSalary_Season/salaries_1985to2018.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetricsData<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframeTotal(playerSalaryData=playerSalaryData,
playerSeasonMetricsData=playerSeasonMetricsData,
year_start=2010,
year_end=2017)
# Grouping
# Gruping by Position
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18 - 22')
ageGroupedDataframe_23_26 <- createAgeGroupingDataframe(completeDataframe, ageGroup='23 - 26')
ageGroupedDataframe_27_30 <- createAgeGroupingDataframe(completeDataframe, ageGroup='27 - 30')
ageGroupedDataframe_31_35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='31 - 35')
ageGroupedDataframe_over35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='>35')
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
colnames(xDF) <- variables
# Create Y-DF
variables = c("Salary")
yDF = createParitalDataframe(df = completeDataframe, colNames = variables)
summary(yDF)
boxplot(yDF)
plot(range(length((yDF))),yDF)
setwd("~/Documents/UT MSBA 2020-21/RStudioWorkingDirectory/Predictive Modeling/predictiveModelingSportsAnalytics")
library(docstring)
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary)
playerSalaryData<-read.csv("Data/PlayerSalary_Season/salaries_1985to2018.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetricsData<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframeTotal(playerSalaryData=playerSalaryData,
playerSeasonMetricsData=playerSeasonMetricsData,
year_start=2010,
year_end=2017)
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18 - 22')
ageGroupedDataframe_23_26 <- createAgeGroupingDataframe(completeDataframe, ageGroup='23 - 26')
ageGroupedDataframe_27_30 <- createAgeGroupingDataframe(completeDataframe, ageGroup='27 - 30')
ageGroupedDataframe_31_35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='31 - 35')
ageGroupedDataframe_over35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='>35')
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
colnames(xDF) <- variables
# Create Y-DF
variables = c("Salary")
yDF = createParitalDataframe(df = completeDataframe, colNames = variables)
summary(yDF)
boxplot(yDF)
plot(range(length((yDF))),yDF)
library(MASS)
View(completeDataframe)
View(ageGroupedDataframe_over35)
View(ageGroupedDataframe_23_26)
View(ageGroupedDataframe_18_22)
library(glmnet)
scaled <- scale(t.dta[,-c(58)])
scaled <- cbind(scaled,t.dta$salary)
tr.s <- scaled[tr,]
t.s <- scaled[-tr,]
lasso.model <- cv.glmnet(tr.s[,-c(58)],tr.s[,c(58)],alpha = 1 )
sqrt(lasso.model$cvm[lasso.model$lambda == lasso.model$lambda.1se])
# Plot lambdas
plot(log(lasso.model$lambda),sqrt(lasso.model$cvm),
main="LASSO CV (k=10)",xlab="log(lambda)",
ylab = "RMSE",col=4,type="b",cex.lab=1.2)
library(MASS)
lasso.model <- cv.glmnet(tr.s[,-c(58)],tr.s[,c(58)],alpha = 1 )
library(glmnet)
scaled <- scale(t.dta[,-c(58)])
library(MASS)
# Dummy for position
pos <- factor(xDF$Pos)
model.1 <- model.matrix(~pos)[,-c(1)]
posC <- ifelse(xDF$Pos == "C",1,0)
pos.1 <- cbind(posC,model.1)
edit <- cbind(xDF,pos.1)[,-c(1)]
# Create data frame (for easier use)
t.dta <- cbind(edit,yDF)
colnames(t.dta)[length(colnames(t.dta))] = "salary"
set.seed(40)
tr <- sample(1:nrow(edit),2400)
train <- t.dta[tr,]
test <- t.dta[-tr,]
model <- lm(salary~.,data = train)
steps <- stepAIC(model,direction = "both",k = log(nrow(t.dta)))
summary(steps)
# adj r of .5453
y.hat <- predict(steps,newdata = test)
MSE.BIC <- mean((test$salary-y.hat)**2)
sqrt(MSE.BIC)
# RMSE of 3.8 mil
y.hat <- predict(steps,newdata = test)
MSE.BIC <- mean((test$salary-y.hat)**2)
sqrt(MSE.BIC)
library(glmnet)
scaled <- scale(t.dta[,-c(58)])
scaled <- cbind(scaled,t.dta$salary)
tr.s <- scaled[tr,]
t.s <- scaled[-tr,]
lasso.model <- cv.glmnet(tr.s[,-c(58)],tr.s[,c(58)],alpha = 1 )
sqrt(lasso.model$cvm[lasso.model$lambda == lasso.model$lambda.1se])
# 3.97 mil
# Plot lambdas
plot(log(lasso.model$lambda),sqrt(lasso.model$cvm),
main="LASSO CV (k=10)",xlab="log(lambda)",
ylab = "RMSE",col=4,type="b",cex.lab=1.2)
abline(v=log(lasso.model$lambda.1se),lty=2,col=2,lwd=2)
coefs.lasso <- predict(lasso.model, type = "coefficients", s = lasso.model$lambda.1se)
coefs.lasso
View(completeDataframe)
#THIS WORKS-----------------DENSITY PLOT WITH MEAN LINES------------------
#calc mean for each group
lildata <- ddply(completeDataframe, "Pos", summarise, grp.mean=mean(Age))
# Exploratory Data Analysis
library(ggplot2)
library(plyr)
#THIS WORKS-----------------DENSITY PLOT WITH MEAN LINES------------------
#calc mean for each group
lildata <- ddply(completeDataframe, "Pos", summarise, grp.mean=mean(Age))
#make density plot
ggplot(completeDataframe, aes(x=Age, color=Pos)) +
geom_density()
#make density plot
ggplot(completeDataframe, aes(x=Age, color=Pos)) +
geom_density()
#make density plot
ggplot(completeDataframe, aes(x=Age, color=Pos)) +
geom_density()
#THIS WORKS-----------------DENSITY PLOT WITH MEAN LINES------------------
#Parameters
#df - dataframe
#xaxis - column of data frame that is categories for x axis boxes
#yaxis - column of data frame that is count for y axis
# labelstr - string value for the y axis label
barchart <- function(df, xaxis, yaxis){
attach(df)
labelstr <- max(df$yaxis)
bar<-ggplot(data=df, aes(x=xaxis, y=yaxis)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
bar
}
barchart(completeDataframe, Pos, FGA)
View(completeDataframe)
unique(completeDataframe$Pos)
#side by side histogram by team
sidebyside <- function(team1, team2){
someteams <- completeDataframe[which(completeDataframe$Tm==team1),]
otherteams <- completeDataframe[which(completeDataframe$Tm==team2),]
both <- rbind(someteams,otherteams)
bothgroups<- ggplot(data=both, aes(x=Tm, y=salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge())
bothgroups
}
sidebyside('MIA', 'HOU')#practice
unique(completeDataframe)
#side by side histogram by team
sidebyside <- function(team1, team2){
someteams <- completeDataframe[which(completeDataframe$Tm==team1),]
otherteams <- completeDataframe[which(completeDataframe$Tm==team2),]
both <- rbind(someteams,otherteams)
bothgroups<- ggplot(data=both, aes(x=Tm, y=Salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge())
bothgroups
}
sidebyside('MIA', 'HOU')#practice
#side by side histogram by team
max(completeDataframe$salaryPercSalaryCap)
#side by side histogram by team
which.max(completeDataframe$salaryPercSalaryCap)
#side by side histogram by team
maxindex<- which.max(completeDataframe$salaryPercSalaryCap)
completeDataframe[maxindex,]
install.packages("Rfast")
library(Rfast)
Rfast::nth(completeDataframe$Salary, 5, descending = T)
Rfast::nth(completeDataframe$Salary, 2, descending = T)
Rfast::nth(completeDataframe$Salary, 1, descending = T)
Rfast::nth(completeDataframe$Salary, 10, descending = T)
Rfast::nth(completeDataframe$Salary, 5, descending = T)
Rfast::nth(completeDataframe$Salary, 2, descending = T)
Rfast::nth(completeDataframe$Salary, 100, descending = T)
Rfast::nth(completeDataframe$Salary, 100, descending = F)
Rfast::nth(completeDataframe$Salary, 2, descending = F)
Rfast::nth(completeDataframe$Salary, 1, descending = F)
Rfast::nth(completeDataframe$Salary, 3080, descending = F)
which.max(completeDataframe$salaryPercSalaryCap)
#side by side histogram by team
max(completeDataframe$Salary)
Rfast::nth(completeDataframe$Salary, 3, descending = F)
maxindex<- Rfast::nth(completeDataframe$Salary, 1, descending = F)
completeDataframe[maxindex,]
maxindex<- Rfast::nth(completeDataframe$Salary, 2, descending = F)
completeDataframe[maxindex,]
Rfast::nth(completeDataframe$Salary, 2, descending = F)
Rfast::nth(completeDataframe$Salary, 5, descending = F)
Rfast::nth(completeDataframe$Salary, 4, descending = F)
Rfast::nth(completeDataframe$Salary, 3, descending = F)
Rfast::nth(completeDataframe$Salary, 2, descending = F)
maxindex<- Rfast::nth(completeDataframe$Salary, 3, descending = F)
completeDataframe[maxindex,]
maxindex<- Rfast::nth(completeDataframe$Salary, 3, descending = T)
completeDataframe[maxindex,]
maxindex<- which.max(completeDataframe$salaryPercSalaryCap)
completeDataframe[maxindex,]
top_n(completeDataframe, 3, Salary)
sidebyside <- function(data, team1, team2){
#someteams <- completeDataframe[which(completeDataframe$Tm==team1),]
#otherteams <- completeDataframe[which(completeDataframe$Tm==team2),]
#both <- rbind(someteams,otherteams)
top5sal<- top_n(data, 3, Salary)
bothgroups<- ggplot(data=top5sal, aes(x=Tm, y=Salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge()) +
ggtitle("Comparison of Salary by Team and Position")
bothgroups
}
sidebyside(completeDataframe, 'MIA', 'HOU')#practice
sidebyside <- function(data, team1, team2){
#someteams <- completeDataframe[which(completeDataframe$Tm==team1),]
#otherteams <- completeDataframe[which(completeDataframe$Tm==team2),]
#both <- rbind(someteams,otherteams)
top5sal<- top_n(data, 10, Salary)
bothgroups<- ggplot(data=top5sal, aes(x=Tm, y=Salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge()) +
ggtitle("Comparison of Salary by Team and Position")
bothgroups
}
sidebyside(completeDataframe, 'MIA', 'HOU')#practice
sidebyside <- function(data, team1, team2){
#someteams <- completeDataframe[which(completeDataframe$Tm==team1),]
#otherteams <- completeDataframe[which(completeDataframe$Tm==team2),]
#both <- rbind(someteams,otherteams)
top5sal<- top_n(data, 100, Salary)
bothgroups<- ggplot(data=top5sal, aes(x=Tm, y=Salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge()) +
ggtitle("Comparison of Salary by Team and Position")
bothgroups
}
sidebyside(completeDataframe, 'MIA', 'HOU')#practice
top5sal<- top_n(data, 20, Salary)
sidebyside <- function(data, team1, team2){
#someteams <- completeDataframe[which(completeDataframe$Tm==team1),]
#otherteams <- completeDataframe[which(completeDataframe$Tm==team2),]
#both <- rbind(someteams,otherteams)
top5sal<- top_n(data, 20, Salary)
bothgroups<- ggplot(data=top5sal, aes(x=Tm, y=Salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge()) +
ggtitle("Comparison of Salary by Team and Position")
bothgroups
}
sidebyside(completeDataframe, 'MIA', 'HOU')#practice
teams<- c(unique(completeDataframe$Tm))
teams<- c(unique(completeDataframe$Tm))
avgsal <- data.frame(Doubles=double(),
Ints=integer(),
Factors=factor(),
Logicals=logical(),
Characters=character(),
stringsAsFactors=FALSE)
for x in length(teams){
teamx <- completeDataframe[which(completeDataframe$Tm==team(x)),]
avg <- mean(teamx$Salary)
avgsal[x,]<- data.frame("Tm" =teams(x), "AvgSal" = avg)
}
for (x in length(teams)){
teamx <- completeDataframe[which(completeDataframe$Tm==team(x)),]
avg <- mean(teamx$Salary)
avgsal[x,]<- data.frame("Tm" =teams(x), "AvgSal" = avg)
}
for (x in c(length(teams)){
for (x in c(length(teams))){
teamx <- completeDataframe[which(completeDataframe$Tm==team(x)),]
avg <- mean(teamx$Salary)
avgsal[x,]<- data.frame("Tm" =teams(x), "AvgSal" = avg)
}
for (x in c(length(teams))){
teamx <- completeDataframe[which(completeDataframe$Tm==teams(x)),]
avg <- mean(teamx$Salary)
avgsal[x,]<- data.frame("Tm" =teams(x), "AvgSal" = avg)
}
typeof(c(unique(completeDataframe$Tm)))
for (x in 1:length(teams)){
teamx <- completeDataframe[which(completeDataframe$Tm==teams(x)),]
avg <- mean(teamx$Salary)
avgsal[x,]<- data.frame("Tm" =teams(x), "AvgSal" = avg)
}
teams<- c(unique(completeDataframe$Tm))
avgsal <- data.frame(Doubles=double(),
Ints=integer(),
Factors=factor(),
Logicals=logical(),
Characters=character(),
stringsAsFactors=FALSE)
for (x in 1:length(teams)){
teamx <- completeDataframe[which(completeDataframe$Tm==teams(x)),]
avg <- mean(teamx$Salary)
avgsal[x,]<- data.frame("Tm" =teams(x), "AvgSal" = avg)
}
teamx <- completeDataframe[which(completeDataframe$Tm==teams[x]),]
for (x in 1:length(teams)){
teamx <- completeDataframe[which(completeDataframe$Tm==teams[x]),]
avg <- mean(teamx$Salary)
avgsal[x,]<- data.frame("Tm" =teams(x), "AvgSal" = avg)
}
for (x in 1:length(teams)){
teamx <- completeDataframe[which(completeDataframe$Tm==teams[x]),]
avg <- mean(teamx$Salary)
avgsal[x,]<- data.frame("Tm" =teams[x], "AvgSal" = avg)
}
View(avgsal)
View(teamx)
for (x in 1:length(teams)){
teamx <- rbind(completeDataframe[which(completeDataframe$Tm==teams[x]),])
avg <- mean(teamx$Salary)
avgsal[x,]<- data.frame("Tm" =teams[x], "AvgSal" = avg)
}
View(avgsal)
