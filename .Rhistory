ind <- medvalue == (min(medvalue))
ind
ind <- (min(medvalue)) == medvalue
ind
low <- min(boston$medv)
medvalue <- c(boston$medv)
ind <- low == medvalue
ind
haystack <- c(1, 2, 4, 3, 4)
needle <- 4
indices <- needle == haystack
indices
indices <- needle = haystack
indices
ind <- which(low == medvalue)
ind
crime <- boston$crim[ind]
crime
ratio <- boston$ptratio[ind]
sum(boston$chas)
summary(boston$ptratio)
boston[ind]
boston[ind,]
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/UT MSBA 2020-21/RStudioWorkingDirectory/Predictive Modeling")
finalschamps <-  read.csv("datasets_1470_72253_championsdata.csv")
finalsrunup <- read.csv("datasets_1470_72253_runnerupsdata.csv")
View(finalschamps)
View(finalsrunup)
PlayerSalaries <- read.csv("~/Documents/UT MSBA 2020-21/RStudioWorkingDirectory/Predictive Modeling/PlayerSalaries.csv")
View(PlayerSalaries)
salaris <- PlayerSalaries[,"Season.Start" == 2017]
salaries <- PlayerSalaries[,"Season.Start" == 2017]
salaries
salaries <- PlayerSalaries[:,"Season.Start" == 2017]
salaries <- PlayerSalaries["Season.Start" == 2017,]
salaries
salaries <- PlayerSalaries["Season.Start" == 2017, ]
salaries <- PlayerSalaries[, ]
salaries <- which(PlayerSalaries$Season.Start == 2017)
salaries
salaries <- c(which(PlayerSalaries$Season.Start == 2017))
salarydf <- PlayerSalaries[salaries,]
View(salarydf)
#dataframe of players in 2017
indexyear <- c(which(PlayerSalaries$Season.Start == 2017))
salarydf <- PlayerSalaries[salaries,]
typeof(salarydf$Salary.in..)
salarydf[ ,(3):=as.numeric(gsub("[$,]","",.SD[,3]))
salarydf[ ,(3):=as.numeric(gsub("[$,]","",.SD[,3]))]
salarydf[ ,(3):=as.numeric(gsub("[$,]","",.SD[,3]))]
# replace $ with blank "" in the df$payment column.  and coerce that result to numeric
salarydf$Salary.in.. = as.numeric(gsub("\\$", "", salarydf$Salary.in..))
View(salarydf)
#dataframe of players in 2017
indexyear <- c(which(PlayerSalaries$Season.Start == 2017))
salarydf <- PlayerSalaries[salaries,]
salarydf$Salary.in.. <- as.numeric(gsub('[$,]', '', salarydf$Salary.in..))
typeof(salarydf$Salary.in..)
typeof(salarydf$Salary.in..[3,])
typeof(salarydf$Salary.in..[3,3])
typeof(salarydf$Salary.in..[,3])
typeof(salarydf$Salary.in..[3,])
typeof(salarydf$Salary.in..(3))
typeof(salarydf$Salary.in..(3,))
plot(salarydf$Salary.in..)
#compare team salaries
select_teams <- c(salarydf$Team)
sal <- salarydf[salarydf$Team %in% select_teams,] # keeping those in the set
sal$Team <- factor(sal$Team) #refactoring to eliminate empty levels.
View(sal)
boxplot(sal$Salary.in.. ~ sal$Team)
#summary of salaries
summary(salarydf$Salary.in..)
#summary of salaries
mia <- salarydf[Team == 'MIA']
#summary of salaries
mia <- salarydf[salarydf$Team == 'MIA']
salarydf$Team == 'MIA'
justmia<- c(salardf$Team == 'MIA')
justmia<- c(salarydf$Team == 'MIA')
summary(salarydf$Salary.in.. %in% justmia
miami <- salarydf[salarydf$Salary.in.. %in% justmia]
justmia<- c(salarydf$Team == 'MIA')
miami <- salarydf[salarydf$Salary.in.. %in% justmia]
summary(miami$Salary.in..)
View(miami)
#summary of salaries
justmiami <- c(which(salarydf$Team == 'MIA'))
salarydf <- salarydf[justmiami,]
#dataframe of players in 2017
indexyear <- c(which(PlayerSalaries$Season.Start == 2017))
salarydf <- PlayerSalaries[salaries,]
#summary of salaries
justmiami <- c(which(salarydf$Team == 'MIA'))
miami <- salarydf[justmiami,]
View(miami)
summary(miami$Salary.in..)
summary(miami$Salary.in..)
#change salaries to integers
salarydf$Salary.in.. <- as.numeric(gsub('[$,]', '', salarydf$Salary.in..))
#summary of salaries
justmiami <- c(which(salarydf$Team == 'MIA'))
miami <- salarydf[justmiami,]
summary(miami$Salary.in..)
#summary of salaries
salarydf$Salary.in..
#summary of salaries
summary(salarydf$Salary.in..)
summary(miami$Salary.in..)
House = read.table("housedata.txt",header=T)
#With attach you can call the columns of the df as objects
#Beware with this function! Be sure to NOT create objects with the same name
#as the name of the columns of the data frame (df).
attach(House)
#Scatterplot
plot(Size,Price,
pch=19) #Type of point
#OLS model
Housemodel = lm(Price~Size,data=House)
#Summary of the model
summary(Housemodel)
#Which kind of information is stored inside the model?
names(Housemodel)
names(summary(Housemodel))
#Confidence interval for coefficients
confint(Housemodel) #Default is 95%
confint(Housemodel,level=0.99) #You can change the level of confidence
#Creating data frame for prediction
#House size from 0 to 8
Xfuture <- data.frame(Size=seq(0,8,by=0.01))
#Calculating 95% and 99% prediction interval
Future1 = predict(Housemodel, Xfuture,
interval = "prediction",se.fit=T)
Future2 = predict(Housemodel, Xfuture,
interval = "prediction",se.fit=T,level=0.99)
#Plotting the model
plot(Size,Price, #The data
xlim=c(0,8), #the range of my predicted X
ylim=range(Future1$fit), #Range of my fit
pch=19, #Type of point
cex.lab=1.3) #Size of lab
abline(lsfit(Size,Price), #lsfit can be used instead of lm()
lwd=2, #Line width
col=2) #Line color
lines(Xfuture$Size,Future1$fit[,2], #Lines of 95% prediction interval
col=4, #Color of line
lwd=2, #Line width
lty=2) #Line type
lines(Xfuture$Size,Future1$fit[,3], #Lines of 95% prediction interval
col=4,lwd=2,lty=2)
lines(Xfuture$Size,Future2$fit[,2], #Lines of 99% prediction interval
col=5,lwd=2,lty=2)
lines(Xfuture$Size,Future2$fit[,3], #Lines of 99% prediction interval
col=5,lwd=2,lty=2)
#BEWARE
rm(list=ls()) #Removes every object from your environment
miaokc <- merge(someteams,otherteams,by="Tm")
#SIDE BY SIDE BAR CHART
#subset for a few teams
someteams <- DATA[which(DATA$Tm=='MIA'),]
DATA <- read.csv("2017_player_salary_and_metrics.csv")
setwd("~/Documents/UT MSBA 2020-21/RStudioWorkingDirectory/Predictive Modeling")
setwd("~/Documents/UT MSBA 2020-21/RStudioWorkingDirectory/Predictive Modeling/predictiveModelingSportsAnalytics")
DATA <- read.csv("2017_player_salary_and_metrics.csv")
library(ggplot2)
library(plyr)
#SIDE BY SIDE BAR CHART
#subset for a few teams
someteams <- DATA[which(DATA$Tm=='MIA'),]
otherteams <- DATA[which(DATA$Tm=='OKC'),]
ggplot(data=someteams, aes(x=Tm, y=salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge())
miaokc <- merge(someteams,otherteams,by="Tm")
miaokc <- merge(someteams,otherteams)
#SIDE BY SIDE BAR CHART
#subset for a few teams
someteams <- DATA[which(DATA$Tm=='MIA'),]
otherteams <- DATA[which(DATA$Tm=='OKC'),]
miaokc <- merge(someteams,otherteams)
miaokc <- rbind(someteams,otherteams)
View(miaokc)
ggplot(data=miaokc, aes(x=Tm, y=salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge())
sidebyside <- function(team1, team2){
someteams <- DATA[which(DATA$Tm==team1),]
otherteams <- DATA[which(DATA$Tm==team2),]
both <- rbind(someteams,otherteams)
bothgroups<- ggplot(data=both, aes(x=Tm, y=salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge())
bothgroups
}
sidebyside('MIA', 'HOU')
sidebyside <- function(team1, team2){
someteams <- DATA[which(DATA$Tm==team1),]
otherteams <- DATA[which(DATA$Tm==team2),]
both <- rbind(otherteams,someteams)
bothgroups<- ggplot(data=both, aes(x=Tm, y=salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge())
bothgroups
}
sidebyside('MIA', 'HOU')
sidebyside <- function(teams,number){
someteams <- DATA[which(DATA$Tm==teams(1)),]
for (i in number){
otherteams<- DATA[which(DATA$Tm==teams(i+1))]
both <- rbind(someteams, otherteams)
}#end of for loop
bothgroups<- ggplot(data=both, aes(x=Tm, y=salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge())
bothgroups
}
sidebyside(('MIA', 'HOU'),2)#practice
sidebyside(c('MIA','HOU'),2)#practice
debugSource('~/Documents/UT MSBA 2020-21/RStudioWorkingDirectory/Predictive Modeling/NBAProjectData_Finals.R')
sidebyside <- function(team1, team2){
someteams <- DATA[which(DATA$Tm==team1),]
otherteams <- DATA[which(DATA$Tm==team2),]
both <- rbind(someteams,otherteams)
bothgroups<- ggplot(data=both, aes(x=Tm, y=salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge())
bothgroups
}
sidebyside('MIA', 'HOU')#practice
sidebyside('MIA', 'HOU')#practice
#summary of values
summary(DATA$FGA)
>>>>>>> origin/master
rm(list = ls())
data <- read.csv("C:/Users/timot/Documents/Github/predictiveModelingSportsAnalytics/2017_player_salary_and_metrics.csv", header = T)
# ONLY LOOK AT STATS and remove columns that have no info
edit <- data[,c(6:53,58)]
rownames(edit) <- data$player_id
# Create dummy variable for each team/position
tm <- factor(edit$Tm)
pos <- factor(edit$Pos)
dummies.1 <- model.matrix(~tm)
dummies.1 <- dummies.1[,-c(1)]
dummies.2 <- model.matrix(~pos)
dummies.2 <- dummies.2[,-c(1)]
edit$posC <- ifelse(edit[,1] == "C",1,0)
edit$tmATL <- ifelse(edit[,3] == "ATL",1,0)
edit <- cbind(edit,dummies.1)
edit <- cbind(edit,dummies.2)
edit <- edit[,-c(1,3)]
# try to compensate for overfit
#set.seed(1)
#set.seed(2)
#set.seed(3)
#set.seed(4)
set.seed(5)
train <- sample(1:nrow(edit),size = 250)
train.data <- edit[train,]
test.data <- edit[-train,]
model.1 <- lm(salary~.,data = train.data)
library(MASS)
steps1 <- stepAIC(model.1, direction = "both", k = 2)
# Fit MLR model
final.AIC <- lm(salary~Age + GS + MP + TRB_perc + STL_perc + BLK_perc + USG_perc +
OWS + DWS + OBPM + BPM + VORP + FG + FGA + X3P + X3PA + X3P_perc +
FT + FTA + DRB + AST + PF + tmATL + tmGSW + tmMIA + tmPOR +
tmUTA + posPG + tmDEN, data = train.data)
# Has an adjusted R-squared of 0.62
summary(final.AIC)
y.hat <- predict(final.AIC,newdata = test.data)
MSE.AIC <- mean((test.data$salary-y.hat)**2)
sqrt(MSE.AIC)
# Has only 5 variables, all high significance.
# Age, GS, FGA, DRB, PF
steps2 <- stepAIC(model.1, direction = "both", k = log(nrow(edit)))
# Fit MLR model
final.BIC <- lm(salary~Age + GS + USG_perc + BPM + VORP + FTA + DRB + AST +
PF + tmPOR, data = train.data)
summary(steps2)
summary(final.BIC)
y.hat <- predict(steps2,newdata = test.data)
MSE.BIC <- mean((test.data$salary-y.hat)**2)
sqrt(MSE.BIC)
sqrt(MSE.BIC)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
install.packages("docstring")
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary)
playerSalaryData<-read.csv("Data/PlayerSalary_Season/salaries_1985to2018.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetricsData<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframeTotal(playerSalaryData=playerSalaryData,
playerSeasonMetricsData=playerSeasonMetricsData,
year_start=2010,
year_end=2017)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18 - 22')
ageGroupedDataframe_23_26 <- createAgeGroupingDataframe(completeDataframe, ageGroup='23 - 26')
ageGroupedDataframe_27_30 <- createAgeGroupingDataframe(completeDataframe, ageGroup='27 - 30')
ageGroupedDataframe_31_35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='31 - 35')
ageGroupedDataframe_over35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='>35')
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
colnames(XDF) <- variables
# Create Y-DF
variables = c("Salary")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
colnames(XDF) <- variables
colnames(xDF) <- variables
# Create Y-DF
variables = c("Salary")
yDF = createParitalDataframe(df = completeDataframe, colNames = variables)
summary(yDF)
boxplot(yDF)
plot(range(length((yDF))),yDF)
View(completeDataframe)
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
xDF
colnames(xDF)
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
?createPartialDataframe
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary)
playerSalaryData<-read.csv("Data/PlayerSalary_Season/salaries_1985to2018.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetricsData<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetricsData<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframeTotal(playerSalaryData=playerSalaryData,
playerSeasonMetricsData=playerSeasonMetricsData,
year_start=2010,
year_end=2017)
completeDataframe
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
xDF
colnames(xDF) <- variables
# Create Y-DF
variables = c("Salary")
yDF = createParitalDataframe(df = completeDataframe, colNames = variables)
yDF
model.1 <- lm(train.y~train.x)
library(MASS)
set.seed(1)
tr <- sample(1:nrow(xDF),size = 2400)
train.x <- xDF[tr,]
train.y <- yDF[tr,]
test.x <- xDF[-tr,]
test.y <- yDF[-tr,]
model.1 <- lm(train.y~train.x)
train.x
train.y
model.1 <- lm(train.y~train.x)
train.x
xDF
summary(xDF)
summary(completeDataframe)
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc","Tm") #Needed to add Team variable
xDF <- createPartialDataframe(df = completeDataframe,colnames = variables)
xDF <- createParitalDataframe(df = completeDataframe,colnames = variables)
xDF <- createParitalDataframe(df = completeDataframe,colNames = variables)
xDF
completeDataframe$Tm
data <- read.csv("2017_player_salary_and_metrics.csv", header = T)
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
colnames(xDF) <- variables
# Create Y-DF
variables = c("Salary")
yDF = createParitalDataframe(df = completeDataframe, colNames = variables)
summary(yDF)
boxplot(yDF)
plot(range(length((yDF))),yDF)
yDF
plot(range(length((yDF))),yDF)
range(length((yDF))
)
pos <- factor(xDF$Pos)
pos
model.1 <- model.matrix(~pos)
model.1
pos
model.1 <- model.matrix(~pos)[,-c(1)]
model.1
which(model.1$CF-PF == 1)
model.1
summary(model.1)
center <- ifelse(xDF$Pos == "C",1,0)
center
C <- ifelse(xDF$Pos == "C",1,0)
pos.1 <- cbind(C,model.1)
pos.1
xDF
edit <- cbind(xDF,pos.1)[,-c(1)]
edit
tm <- factor(completeDataframe$Tm)
tm
model.2 <- model.matrix(~tm)
model.
model.2
Tm
tm
model.2
edit
tmATL <- ifelse(completeDataframe$Tm == "ATL",1,0)
edit <- cbind(edit,tm.1)
tm.1 <- cbind(tmATL,model.2)
edit <- cbind(edit,tm.1)
edit
train.x <- edit[tr,]
test.x <- edit[tr,]
tr <- sample(1:nrow(edit),2400)
train.x <- edit[tr,]
test.x <- edit[tr,]
train.y <- yDF[tr,]
train.y <- yDF[tr,]
test.y <- yDF[tr,]
t.dta <- cbind(edit,yDF)
t.dta <- data.frame(cbind(edit,yDF))
train <- t.dta[tr,]
t.dta
colnames(t.dta)[length(colnames(t.dta))] = "salary"
t.dta
train <- t.dta[tr,]
test <- t.dta[-tr,]
# Dummy for team
tm <- factor(completeDataframe$Tm)
model.2 <- model.matrix(~tm)[,-c(1)]
model.2
model.2 <- model.matrix(~tm)[,-c(1)]
tmATL <- ifelse(completeDataframe$Tm == "ATL",1,0)
tm.1 <- cbind(tmATL,model.2)
tm.1
edit <- cbind(edit,tm.1)
edit
t.dta <- cbind(edit,tm.1)
t.dta
t.dta <- cbind(edit,yDF)
t.dta
colnames(t.dta)[length(colnames(t.dta))] = "salary"
t.dta
completeDataframe$Tm
library(MASS)
model <- lm(salary~.,data = train)
steps <- stepAIC(model,direction = "both",k = log(nrow(t.dta)))
# Dummy for position
pos <- factor(xDF$Pos)
model.1 <- model.matrix(~pos)[,-c(1)]
posC <- ifelse(xDF$Pos == "C",1,0)
pos.1 <- cbind(C,model.1)
edit <- cbind(xDF,pos.1)[,-c(1)]
t.dta <- cbind(edit,yDF)
colnames(t.dta)[length(colnames(t.dta))] = "salary"
set.seed(1)
tr <- sample(1:nrow(edit),2400)
train <- t.dta[tr,]
test <- t.dta[-tr,]
model <- lm(salary~.,data = train)
edit
steps <- stepAIC(model,direction = "both",k = log(nrow(t.dta)))
model <- lm(salary~1,data = train)
steps <- stepAIC(model,direction = "both",k = log(nrow(t.dta)))
summary(steps)
steps <- stepAIC(model,direction = "both",k = log(nrow(t.dta)))
model <- lm(salary~.,data = train)
steps <- stepAIC(model,direction = "both",k = log(nrow(t.dta)))
summary(steps)
y.hat <- predict(steps,newdata = test)
MSE.BIC <- mean((test$salary-y.hat)**2)
sqrt(MSE.BIC)
set.seed(40)
tr <- sample(1:nrow(edit),2400)
train <- t.dta[tr,]
test <- t.dta[-tr,]
model <- lm(salary~.,data = train)
steps <- stepAIC(model,direction = "both",k = log(nrow(t.dta)))
summary(steps)
y.hat <- predict(steps,newdata = test)
MSE.BIC <- mean((test$salary-y.hat)**2)
sqrt(MSE.BIC)
# Prediction
source("Prediction/predictions_based_on_position.R")
player_csv <- cleanPlayerSalary(completeDataframe)
