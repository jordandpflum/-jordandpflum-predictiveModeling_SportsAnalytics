# Has only 5 variables, all high significance.
# Age, GS, FGA, DRB, PF
steps2 <- stepAIC(model.1, direction = "both", k = log(nrow(edit)))
summary(final.BIC)
summary(steps2)
y.hat <- predict(steps2,newdata = test.data)
MSE.BIC <- mean((test.data$salary-y.hat)**2)
sqrt(MSE.BIC)
# try to compensate for overfit
#set.seed(1)
#set.seed(2)
set.seed(3)
train <- sample(1:nrow(edit),size = 250)
train.data <- edit[train,]
test.data <- edit[-train,]
model.1 <- lm(salary~.,data = train.data)
library(MASS)
steps1 <- stepAIC(model.1, direction = "both", k = 2)
# Fit MLR model
final.AIC <- lm(salary~Age + GS + MP + TRB_perc + STL_perc + BLK_perc + USG_perc +
OWS + DWS + OBPM + BPM + VORP + FG + FGA + X3P + X3PA + X3P_perc +
FT + FTA + DRB + AST + PF + tmATL + tmGSW + tmMIA + tmPOR +
tmUTA + posPG + tmDEN, data = train.data)
# Has an adjusted R-squared of 0.62
summary(final.AIC)
y.hat <- predict(final.AIC,newdata = test.data)
MSE.AIC <- mean((test.data$salary-y.hat)**2)
sqrt(MSE.AIC)
# Has only 5 variables, all high significance.
# Age, GS, FGA, DRB, PF
steps2 <- stepAIC(model.1, direction = "both", k = log(nrow(edit)))
# Fit MLR model
final.BIC <- lm(salary~Age + GS + USG_perc + BPM + VORP + FTA + DRB + AST +
PF + tmPOR, data = train.data)
summary(final.BIC)
y.hat <- predict(final.BIC,newdata = test.data)
# try to compensate for overfit
#set.seed(1)
#set.seed(2)
#set.seed(3)
set.seed(4)
train <- sample(1:nrow(edit),size = 250)
train.data <- edit[train,]
test.data <- edit[-train,]
model.1 <- lm(salary~.,data = train.data)
library(MASS)
steps1 <- stepAIC(model.1, direction = "both", k = 2)
# Fit MLR model
final.AIC <- lm(salary~Age + GS + MP + TRB_perc + STL_perc + BLK_perc + USG_perc +
OWS + DWS + OBPM + BPM + VORP + FG + FGA + X3P + X3PA + X3P_perc +
FT + FTA + DRB + AST + PF + tmATL + tmGSW + tmMIA + tmPOR +
tmUTA + posPG + tmDEN, data = train.data)
# Has an adjusted R-squared of 0.62
summary(final.AIC)
y.hat <- predict(final.AIC,newdata = test.data)
MSE.AIC <- mean((test.data$salary-y.hat)**2)
sqrt(MSE.AIC)
# Has only 5 variables, all high significance.
# Age, GS, FGA, DRB, PF
steps2 <- stepAIC(model.1, direction = "both", k = log(nrow(edit)))
# Fit MLR model
final.BIC <- lm(salary~Age + GS + USG_perc + BPM + VORP + FTA + DRB + AST +
PF + tmPOR, data = train.data)
summary(final.BIC)
y.hat <- predict(final.BIC,newdata = test.data)
MSE.BIC <- mean((test.data$salary-y.hat)**2)
sqrt(MSE.BIC)
# try to compensate for overfit
#set.seed(1)
#set.seed(2)
#set.seed(3)
#set.seed(4)
set.seed(5)
train <- sample(1:nrow(edit),size = 250)
train.data <- edit[train,]
test.data <- edit[-train,]
model.1 <- lm(salary~.,data = train.data)
library(MASS)
steps1 <- stepAIC(model.1, direction = "both", k = 2)
# Fit MLR model
final.AIC <- lm(salary~Age + GS + MP + TRB_perc + STL_perc + BLK_perc + USG_perc +
OWS + DWS + OBPM + BPM + VORP + FG + FGA + X3P + X3PA + X3P_perc +
FT + FTA + DRB + AST + PF + tmATL + tmGSW + tmMIA + tmPOR +
tmUTA + posPG + tmDEN, data = train.data)
# Has an adjusted R-squared of 0.62
summary(final.AIC)
y.hat <- predict(final.AIC,newdata = test.data)
MSE.AIC <- mean((test.data$salary-y.hat)**2)
sqrt(MSE.AIC)
# Has only 5 variables, all high significance.
# Age, GS, FGA, DRB, PF
steps2 <- stepAIC(model.1, direction = "both", k = log(nrow(edit)))
# Fit MLR model
final.BIC <- lm(salary~Age + GS + USG_perc + BPM + VORP + FTA + DRB + AST +
PF + tmPOR, data = train.data)
summary(final.BIC)
y.hat <- predict(final.BIC,newdata = test.data)
MSE.BIC <- mean((test.data$salary-y.hat)**2)
sqrt(MSE.BIC)
rm(list = ls())
data <- read.csv("C:/Users/timot/Documents/Github/predictiveModelingSportsAnalytics/2017_player_salary_and_metrics.csv", header = T)
summary(data$salary)
rm(list = ls())
data <- read.csv("C:/Users/timot/Documents/Github/predictiveModelingSportsAnalytics/2017_player_salary_and_metrics.csv", header = T)
# ONLY LOOK AT STATS and remove columns that have no info
edit <- data[,c(6:53,58)]
rownames(edit) <- data$player_id
# Create dummy variable for each team/position
tm <- factor(edit$Tm)
pos <- factor(edit$Pos)
dummies.1 <- model.matrix(~tm)
dummies.1 <- dummies.1[,-c(1)]
dummies.2 <- model.matrix(~pos)
dummies.2 <- dummies.2[,-c(1)]
edit$posC <- ifelse(edit[,1] == "C",1,0)
edit$tmATL <- ifelse(edit[,3] == "ATL",1,0)
edit <- cbind(edit,dummies.1)
edit <- cbind(edit,dummies.2)
edit <- edit[,-c(1,3)]
# try to compensate for overfit
#set.seed(1)
#set.seed(2)
#set.seed(3)
#set.seed(4)
set.seed(5)
train <- sample(1:nrow(edit),size = 250)
train.data <- edit[train,]
test.data <- edit[-train,]
model.1 <- lm(salary~.,data = train.data)
library(MASS)
steps1 <- stepAIC(model.1, direction = "both", k = 2)
# Fit MLR model
final.AIC <- lm(salary~Age + GS + MP + TRB_perc + STL_perc + BLK_perc + USG_perc +
OWS + DWS + OBPM + BPM + VORP + FG + FGA + X3P + X3PA + X3P_perc +
FT + FTA + DRB + AST + PF + tmATL + tmGSW + tmMIA + tmPOR +
tmUTA + posPG + tmDEN, data = train.data)
# Has an adjusted R-squared of 0.62
summary(final.AIC)
y.hat <- predict(final.AIC,newdata = test.data)
MSE.AIC <- mean((test.data$salary-y.hat)**2)
sqrt(MSE.AIC)
# Has only 5 variables, all high significance.
# Age, GS, FGA, DRB, PF
steps2 <- stepAIC(model.1, direction = "both", k = log(nrow(edit)))
# Fit MLR model
final.BIC <- lm(salary~Age + GS + USG_perc + BPM + VORP + FTA + DRB + AST +
PF + tmPOR, data = train.data)
summary(final.BIC)
y.hat <- predict(final.BIC,newdata = test.data)
MSE.BIC <- mean((test.data$salary-y.hat)**2)
sqrt(MSE.BIC)
library(glmnet)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary)
playerSalaryData<-read.csv("Data/PlayerSalary_Season/salaries_1985to2018.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetricsData<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframeTotal(playerSalaryData=playerSalaryData,
playerSeasonMetricsData=playerSeasonMetricsData,
year_start=2010,
year_end=2017)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18 - 22')
ageGroupedDataframe_23_26 <- createAgeGroupingDataframe(completeDataframe, ageGroup='23 - 26')
ageGroupedDataframe_27_30 <- createAgeGroupingDataframe(completeDataframe, ageGroup='27 - 30')
ageGroupedDataframe_31_35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='31 - 35')
ageGroupedDataframe_over35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='>35')
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
colnames(xDF) <- variables
# Create Y-DF
variables = c("Salary")
yDF = createParitalDataframe(df = completeDataframe, colNames = variables)
summary(yDF)
boxplot(yDF)
plot(range(length((yDF))),yDF)
library(MASS)
# Dummy for position
pos <- factor(xDF$Pos)
model.1 <- model.matrix(~pos)[,-c(1)]
posC <- ifelse(xDF$Pos == "C",1,0)
pos.1 <- cbind(C,model.1)
edit <- cbind(xDF,pos.1)[,-c(1)]
t.dta <- cbind(edit,yDF)
colnames(t.dta)[length(colnames(t.dta))] = "salary"
set.seed(40)
tr <- sample(1:nrow(edit),2400)
train <- t.dta[tr,]
test <- t.dta[-tr,]
model <- lm(salary~.,data = train)
steps <- stepAIC(model,direction = "both",k = log(nrow(t.dta)))
summary(steps)
y.hat <- predict(steps,newdata = test)
MSE.BIC <- mean((test$salary-y.hat)**2)
sqrt(MSE.BIC)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
library(docstring)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
setwd("C:\Users\timot\Documents\GitHub\predictiveModelingSportsAnalytics")
setwd("C:/Users/timot/Documents/GitHub/predictiveModelingSportsAnalytics")
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary)
playerSalaryData<-read.csv("Data/PlayerSalary_Season/salaries_1985to2018.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetricsData<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframeTotal(playerSalaryData=playerSalaryData,
playerSeasonMetricsData=playerSeasonMetricsData,
year_start=2010,
year_end=2017)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18 - 22')
ageGroupedDataframe_23_26 <- createAgeGroupingDataframe(completeDataframe, ageGroup='23 - 26')
ageGroupedDataframe_27_30 <- createAgeGroupingDataframe(completeDataframe, ageGroup='27 - 30')
ageGroupedDataframe_31_35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='31 - 35')
ageGroupedDataframe_over35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='>35')
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
colnames(xDF) <- variables
# Create Y-DF
variables = c("Salary")
yDF = createParitalDataframe(df = completeDataframe, colNames = variables)
summary(yDF)
boxplot(yDF)
plot(range(length((yDF))),yDF)
library(MASS)
# Dummy for position
pos <- factor(xDF$Pos)
model.1 <- model.matrix(~pos)[,-c(1)]
posC <- ifelse(xDF$Pos == "C",1,0)
pos.1 <- cbind(C,model.1)
edit <- cbind(xDF,pos.1)[,-c(1)]
t.dta <- cbind(edit,yDF)
colnames(t.dta)[length(colnames(t.dta))] = "salary"
set.seed(40)
tr <- sample(1:nrow(edit),2400)
train <- t.dta[tr,]
test <- t.dta[-tr,]
model <- lm(salary~.,data = train)
steps <- stepAIC(model,direction = "both",k = log(nrow(t.dta)))
summary(steps)
test
train
# Dummy for position
pos <- factor(xDF$Pos)
pos
xDF
model.1 <- model.matrix(~pos)[,-c(1)]
model.1
posC <- ifelse(xDF$Pos == "C",1,0)
pos.1 <- cbind(C,model.1)
edit <- cbind(xDF,pos.1)[,-c(1)]
t.dta <- cbind(edit,yDF)
colnames(t.dta)[length(colnames(t.dta))] = "salary"
set.seed(40)
tr <- sample(1:nrow(edit),2400)
train <- t.dta[tr,]
test <- t.dta[-tr,]
model <- lm(salary~.,data = train)
posC <- ifelse(xDF$Pos == "C",1,0)
posC
t.dta
edit
xDF
edit
pos.1 <- cbind(posC,model.1)
edit <- cbind(xDF,pos.1)[,-c(1)]
t.dta <- cbind(edit,yDF)
colnames(t.dta)[length(colnames(t.dta))] = "salary"
set.seed(40)
tr <- sample(1:nrow(edit),2400)
train <- t.dta[tr,]
test <- t.dta[-tr,]
model <- lm(salary~.,data = train)
steps <- stepAIC(model,direction = "both",k = log(nrow(t.dta)))
summary(steps)
y.hat <- predict(steps,newdata = test)
MSE.BIC <- mean((test$salary-y.hat)**2)
sqrt(MSE.BIC)
?glmnet
str(train)
lasso.model <- glmnet(train[,-c(58)],train[,c(58)],alpha = 1 )
train[,-c(58)]
scaled.tr <- scale(train)
scaled.tr
?scale
summary(scaled.tr)
View(scaled.tr)
scaled <- scale(t.dta)
t.s <- scaled[-tr,]
tr.s <- scaled[tr,]
lasso.model <- glmnet(tr.s[,-c(58)],tr.s[,c(58)],alpha = 1 )
lasso.model
plot(lasso.model)
lasso.model <- cv.glmnet(tr.s[,-c(58)],tr.s[,c(58)],alpha = 1 )
lasso.model
#plot(lasso.model)
plot(log(lasso.model$lambda),sqrt(lasso.model$cvm),
main="LASSO CV (k=10)",xlab="log(lambda)",
ylab = "RMSE",col=4,type="b",cex.lab=1.2)
abline(v=log(lasso.model$lambda.1se),lty=2,col=2,lwd=2)
?cv.glmnet
abline(v=log(lasso.model$lamnda.min),lty=2,col=2,lwd=2)
# Plot lambdas
plot(log(lasso.model$lambda),sqrt(lasso.model$cvm),
main="LASSO CV (k=10)",xlab="log(lambda)",
ylab = "RMSE",col=4,type="b",cex.lab=1.2)
abline(v=log(lasso.model$lamnda.min),lty=2,col=2,lwd=2)
abline(v=log(lasso.model$lambda.min),lty=2,col=2,lwd=2)
coefs.lasso <- predict(lasso.model, type = "coefficients", s = lasso.model$lambda.min)
coefs.lasso
coefs.lasso <- predict(lasso.model, type = "coefficients", s = lasso.model$lambda.1se)
coefs.lasso
?cv.glmnet
abline(v=log(lasso.model$lambda.1se),lty=2,col=2,lwd=2)
# Plot lambdas
plot(log(lasso.model$lambda),sqrt(lasso.model$cvm),
main="LASSO CV (k=10)",xlab="log(lambda)",
ylab = "RMSE",col=4,type="b",cex.lab=1.2)
abline(v=log(lasso.model$lambda.1se),lty=2,col=2,lwd=2)
coefs.lasso <- predict(lasso.model, type = "coefficients", s = lasso.model$lambda.1se)
coefs.lasso
?cv.glmnet
lasso.model$cvm
dim(t.dta)
scaled <- cbind(scaled,t.dta$salary)
tr.s <- scaled[tr,]
t.s <- scaled[-tr,]
lasso.model <- cv.glmnet(tr.s[,-c(58)],tr.s[,c(58)],alpha = 1 )
lasso.model$cvm
# Plot lambdas
plot(log(lasso.model$lambda),sqrt(lasso.model$cvm),
main="LASSO CV (k=10)",xlab="log(lambda)",
ylab = "RMSE",col=4,type="b",cex.lab=1.2)
abline(v=log(lasso.model$lambda.1se),lty=2,col=2,lwd=2)
coefs.lasso <- predict(lasso.model, type = "coefficients", s = lasso.model$lambda.1se)
coefs.lasso
lasso.model
tr.s
scaled <- scale(t.dta[,-c(58)])
scaled <- cbind(scaled,t.dta$salary)
tr.s <- scaled[tr,]
t.s <- scaled[-tr,]
lasso.model <- cv.glmnet(tr.s[,-c(58)],tr.s[,c(58)],alpha = 1 )
lasso.model$cvm
1.533443e+13
# Plot lambdas
plot(log(lasso.model$lambda),sqrt(lasso.model$cvm),
main="LASSO CV (k=10)",xlab="log(lambda)",
ylab = "RMSE",col=4,type="b",cex.lab=1.2)
abline(v=log(lasso.model$lambda.1se),lty=2,col=2,lwd=2)
coefs.lasso <- predict(lasso.model, type = "coefficients", s = lasso.model$lambda.1se)
coefs.lasso
ridge.model <- cv.glmnet(tr.s[,-c(58)],tr.s[,c(58)],alpha = 0)
ridge.model$cvmf
ridge.model$cvm
plot(log(ridge.model$lambda),sqrt(ridge.model$cvm),
main="LASSO CV (k=10)",xlab="log(lambda)",
ylab = "RMSE",col=4,type="b",cex.lab=1.2)
abline(v=log(ridge.model$lambda.1se),lty=2,col=2,lwd=2)
coefs.lasso <- predict(ridge.model, type = "coefficients", s = ridge.model$lambda.1se)
coefs.lasso
coefs.ridge <- predict(ridge.model, type = "coefficients", s = ridge.model$lambda.1se)
coefs.ridge
coefs.lasso <- predict(lasso.model, type = "coefficients", s = lasso.model$lambda.1se)
coefs.lasso
ridge.model$cvm[ridge.model$lambda == ridge.model$lambda.1se]
sqrt(ridge.model$cvm[ridge.model$lambda == ridge.model$lambda.1se])
sqrt(lasso.model$cvm[ridge.model$lambda == lasso.model$lambda.1se])
sqrt(lasso.model$cvm[lasso.model$lambda == lasso.model$lambda.1se])
sqrt(ridge.model$cvm[ridge.model$lambda == ridge.model$lambda.1se])
ls()
rm(list = c("edit","lasso.model","model.1","pos","MSE.BIC","posC","scaled","ridge.model","scaled.tr","t.s","t.dta","tr","train","y.hat"))
ls()
rm(list = c("edit","lasso.model","model.1","pos","MSE.BIC","posC","scaled","ridge.model","scaled.tr","t.s","t.dta","tr","train","y.hat","test","pos1","steps"))
ls()
rm(list = c("edit","lasso.model","model.1","pos","MSE.BIC","posC",
"scaled","ridge.model","scaled.tr","t.s","t.dta","tr",
"train","y.hat","test","pos.1","steps","tr.s","model"))
ls()
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
library(docstring)
source("DataWrangling/CleaningSalary.R")
source("DataWrangling/cleaningSeasonMetrics.R")
createCompleteDataframe <- function(playerSalaryData, playerSeasonMetricsData){
#' @description This function creates a complete and clean dataframe
#'
#' @return Complete Dataframe
#'
cleanPlayerSalay_2017 <- cleanPlayerSalary(playerSalary=playerSalaryData)
# Get Clean Metric Dataset
cleanPlayerSeasonMetrics_2017 <- cleanPlayerSeasonMetrics(playerSeasonMetrics=playerSeasonMetricsData,
subsetYear=2017
)
completeDataframe <- merge(x = cleanPlayerSeasonMetrics_2017,
y = cleanPlayerSalay_2017[,c("Player", "Salary")],
by = "Player",
all.x=TRUE
)
# Remove NAs (Players in metrics but not in salary dataset)
completeDataframe<-completeDataframe[complete.cases(completeDataframe), ]
return(completeDataframe)
}
createCompleteDataframeTotal <- function(playerSalaryData, playerSeasonMetricsData,year_start,year_end){
#' @description This function creates a complete and clean dataframe
#'
#' @return Complete Dataframe
#'
cleanPlayerSalayDataframe <- cleanPlayerSalaryTotal(playerSalaryData,
year_start=year_start,
year_end=year_end
)
# Get Clean Metric Dataset
cleanPlayerSeasonMetricsDataframe <- cleanPlayerSeasonMetricsTotal(playerSeasonMetricsData,
year_start=year_start,
year_end=year_end
)
completeDataframe <- merge(x = cleanPlayerSeasonMetricsDataframe,
y = cleanPlayerSalayDataframe[,c("Player", "Salary", "salaryPercSalaryCap","Year")],
by = c("Player", "Year"),
all.x=TRUE
)
# completeDataframe <- left_join(cleanPlayerSalayDataframe, DF2, by=c("col1","col2")) %>%
#   rowwise() %>%
#   mutate(data = ifelse(between(value,min,max), data, NA)) %>%
#   select(-min, -max)
# )
# Remove NAs (Players in metrics but not in salary dataset)
completeDataframe<-completeDataframe[complete.cases(completeDataframe), ]
return(completeDataframe)
}
View(consolidatePos)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary)
playerSalaryData<-read.csv("Data/PlayerSalary_Season/salaries_1985to2018.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetricsData<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframeTotal(playerSalaryData=playerSalaryData,
playerSeasonMetricsData=playerSeasonMetricsData,
year_start=2010,
year_end=2017)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18 - 22')
ageGroupedDataframe_23_26 <- createAgeGroupingDataframe(completeDataframe, ageGroup='23 - 26')
ageGroupedDataframe_27_30 <- createAgeGroupingDataframe(completeDataframe, ageGroup='27 - 30')
ageGroupedDataframe_31_35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='31 - 35')
ageGroupedDataframe_over35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='>35')
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
colnames(xDF) <- variables
# Create Y-DF
variables = c("Salary")
yDF = createParitalDataframe(df = completeDataframe, colNames = variables)
summary(yDF)
boxplot(yDF)
plot(range(length((yDF))),yDF)
library(MASS)
# Dummy for position
pos <- factor(xDF$Pos)
model.1 <- model.matrix(~pos)[,-c(1)]
posC <- ifelse(xDF$Pos == "C",1,0)
pos.1 <- cbind(posC,model.1)
edit <- cbind(xDF,pos.1)[,-c(1)]
t.dta <- cbind(edit,yDF)
colnames(t.dta)[length(colnames(t.dta))] = "salary"
set.seed(40)
tr <- sample(1:nrow(edit),2400)
train <- t.dta[tr,]
test <- t.dta[-tr,]
model <- lm(salary~.,data = train)
steps <- stepAIC(model,direction = "both",k = log(nrow(t.dta)))
summary(steps)
y.hat <- predict(steps,newdata = test)
MSE.BIC <- mean((test$salary-y.hat)**2)
sqrt(MSE.BIC)
