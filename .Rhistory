<<<<<<< HEAD
View(createCompleteDataframe)
rm(list=ls())
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
test <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
list("DataWrangling/createCompleteDataframe.R")
source("DataWrangling/createCompleteDataframe.R")
rm(list=ls())
source("DataWrangling/createCompleteDataframe.R")
rm(list=ls())
source("DataWrangling/createCompleteDataframe.R")
source("CleaningSalary.R")
source("cleaningSeasonMetrics.R")
source("/CleaningSalary.R")
source("DataWrangling/CleaningSalary.R")
source("DataWrangling/cleaningSeasonMetrics.R")
createCompleteDataframe <- function(playerSalaryData, playerSeasonMetricsData){
#' @description This function creates a complete and clean dataframe
#'
#' @return Complete Dataframe
#'
print("here")
cleanPlayerSalay_2017 <- cleanPlayerSalary(playerSalary=playerSalaryData)
# Get Clean Metric Dataset
cleanPlayerSeasonMetrics_2017 <- cleanPlayerSeasonMetrics(playerSeasonMetrics=playerSeasonMetricsData,
subsetYear=2017,
rmNA=TRUE,
rmDuplicates=TRUE,
exportCSV=FALSE
)
completeDataframe <- playerSalary <- merge(x = cleanPlayerSeasonMetrics_2017,
y = cleanPlayerSalary_2017[ , c("Player", "Salary")],
by = "Player",
all.x=TRUE
)
return(completeDataframe)
}
source("DataWrangling/createCompleteDataframe.R")
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
test <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
test <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
rm(list=ls())
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
test <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
# Prediction
source("Prediction/predictions_based_on_position.R")
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Prediction
source("Prediction/predictions_based_on_position.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Prediction
source("Prediction/predictions_based_on_position.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Prediction
source("Prediction/predictions_based_on_position.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
setwd("D:/UT/Summer/Predictive Modeling/Group Project/predictiveModelingSportsAnalytics")
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Prediction
source("Prediction/predictions_based_on_position.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Prediction
source("Prediction/predictions_based_on_position.R")
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Prediction
source("Prediction/predictions_based_on_position.R")
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
# Prediction
source("Prediction/predictions_based_on_position.R")
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
completeDataframe
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
# Prediction
source("Prediction/predictions_based_on_position.R")
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Prediction
source("Prediction/predictions_based_on_position.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Prediction
source("Prediction/predictions_based_on_position.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Prediction
source("Prediction/predictions_based_on_position.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
# Prediction
source("Prediction/predictions_based_on_position.R")
rm(list=ls())
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
# Prediction
source("Prediction/predictions_based_on_position.R")
player_csv <- cleanPlayerSalary(completeDataframe)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe <- createAgeGroupingDataframe(completeDataframe)
View(ageGroupedDataframe)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe <- createAgeGroupingDataframe(completeDataframe)
View(ageGroupedDataframe)
View(ageGroupedDataframe)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe <- createAgeGroupingDataframe(completeDataframe)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe <- createAgeGroupingDataframe(completeDataframe)
source("DataWrangling/createCompleteDataframe.R")
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe <- createAgeGroupingDataframe(completeDataframe)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe <- createAgeGroupingDataframe(completeDataframe)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18-22')
View(ageGroupedDataframe_18_22)
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18-22')
ageGroupedDataframe_23_26 <- createAgeGroupingDataframe(completeDataframe, ageGroup='23-26')
ageGroupedDataframe_27_30 <- createAgeGroupingDataframe(completeDataframe, ageGroup='27-30')
ageGroupedDataframe_31_35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='31-35')
ageGroupedDataframe_over35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='>35')
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18-22')
ageGroupedDataframe_23_26 <- createAgeGroupingDataframe(completeDataframe, ageGroup='23-26')
ageGroupedDataframe_27_30 <- createAgeGroupingDataframe(completeDataframe, ageGroup='27-30')
ageGroupedDataframe_31_35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='31-35')
ageGroupedDataframe_over35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='>35')
ageGroupedDataframe_23_26
ageGroupedDataframe_18_22
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18 - 22')
ageGroupedDataframe_23_26 <- createAgeGroupingDataframe(completeDataframe, ageGroup='23 - 26')
ageGroupedDataframe_27_30 <- createAgeGroupingDataframe(completeDataframe, ageGroup='27 - 30')
ageGroupedDataframe_31_35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='31 - 35')
ageGroupedDataframe_over35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='>35')
View(completeDataframe)
# Create X-DF
source("DataWrangling/createXDataframe.R")
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
colnames(completeDataframe)
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18 - 22')
ageGroupedDataframe_23_26 <- createAgeGroupingDataframe(completeDataframe, ageGroup='23 - 26')
ageGroupedDataframe_27_30 <- createAgeGroupingDataframe(completeDataframe, ageGroup='27 - 30')
ageGroupedDataframe_31_35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='31 - 35')
ageGroupedDataframe_over35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='>35')
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
# Create Y-DF
variables = c("Salary")
yDF = createParitalDataframe(df = completeDataframe, colNames = variables)
View(yDF)
player_csv <- cleanPlayerSalary(completeDataframe)
player_csv
suummary(yDF)
yDF = createParitalDataframe(df = completeDataframe, colNames = variables)
suummary(yDF)
summary(yDF)
plot(yDF)
plot([1:length(yDF),yDF)
plot(range(length((yDF))),yDF)
range(length((yDF)))
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18 - 22')
ageGroupedDataframe_23_26 <- createAgeGroupingDataframe(completeDataframe, ageGroup='23 - 26')
ageGroupedDataframe_27_30 <- createAgeGroupingDataframe(completeDataframe, ageGroup='27 - 30')
ageGroupedDataframe_31_35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='31 - 35')
ageGroupedDataframe_over35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='>35')
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
# Create Y-DF
variables = c("Salary")
yDF = createParitalDataframe(df = completeDataframe, colNames = variables)
DATA <- read.csv("2017_player_salary_and_metrics.csv")
library(ggplot2)
library(plyr)
#compare team salaries with each other
select_teams <- c(salarydf$Team)
summary(yDF)
boxplot(yDF)
colnames(XDF) <- variables
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
colnames(XDF) <- variables
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
# Grouping
# Gruping by Position
# Grouping by Age.
source("Classification/createAgeGroupingDataframe.R")
ageGroupedDataframe_18_22 <- createAgeGroupingDataframe(completeDataframe, ageGroup='18 - 22')
ageGroupedDataframe_23_26 <- createAgeGroupingDataframe(completeDataframe, ageGroup='23 - 26')
ageGroupedDataframe_27_30 <- createAgeGroupingDataframe(completeDataframe, ageGroup='27 - 30')
ageGroupedDataframe_31_35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='31 - 35')
ageGroupedDataframe_over35 <- createAgeGroupingDataframe(completeDataframe, ageGroup='>35')
# Create X-DF
source("DataWrangling/createPartialDataframe.R")
variables = c("Pos", "Age", "G", "GS", "MP", "PTS", "AST", "TRB", "ORB", "DRB",
"STL", "BLK", "TOV", "PF", "FG", "FGA", "X2P", "X2PA", "X3P",
"FT", "FTA", "PER", "ORB_perc", "DRB_perc", "TRB_perc", "AST_perc",
"STL_perc", "BLK_perc", "TOV_perc", "USG_perc", "OWS", "DWS",
"WS", "WS_48", "OBPM", "DBPM", "BPM", "VORP", "TSA", "TS_perc",
"X3P_perc", "X2P_perc", "eFG_perc", "FT_perc")
xDF = createParitalDataframe(df = completeDataframe, colNames = variables)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
View(playerSalay_2017)
source("DataWrangling/CleaningSalary.R")
source("DataWrangling/cleaningSeasonMetrics.R")
createCompleteDataframe <- function(playerSalaryData, playerSeasonMetricsData){
#' @description This function creates a complete and clean dataframe
#'
#' @return Complete Dataframe
#'
cleanPlayerSalay_2017 <- cleanPlayerSalary(playerSalary=playerSalaryData)
# Get Clean Metric Dataset
cleanPlayerSeasonMetrics_2017 <- cleanPlayerSeasonMetrics(playerSeasonMetrics=playerSeasonMetricsData,
subsetYear=2017
)
completeDataframe <- playerSalary <- merge(x = cleanPlayerSeasonMetrics_2017,
y = cleanPlayerSalay_2017[,c("Player", "Salary")],
by = "Player",
all.x=TRUE
)
# Remove NAs (Players in metrics but not in salary dataset)
completeDataframe<-completeDataframe[complete.cases(completeDataframe), ]
return(completeDataframe)
}
test <- createCompleteDataframe()
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
rm(list=ls())
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
completeDataframe <- createCompleteDataframe(playerSalaryData=playerSalay_2017, playerSeasonMetricsData=playerSeasonMetrics)
cleanPlayerSalay_2017[,c("Player", "Salary")]
cleanPlayerSalary(playerSalary=playerSalaryData)
cleanPlayerSalay_2017 <- cleanPlayerSalary(playerSalary=playerSalay_2017)
View(cleanPlayerSalay_2017)
test <- cleanPlayerSalary(playerSalay_2017)
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
View(cleanPlayerSalary)
View(playerSalay_2017)
test <- cleanPlayerSalary(playerSalay_2017)
#' @description This function cleans the salary CSV, dealing with
#' player's who were traded
#'
#'
#' @param playerSalary dataframe. Read in salary_2017.csv file
#' @return dataframe. A clean and complete salaries dataframe
#'
print("here")
test <- cleanPlayerSalary(playerSalay_2017)
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
test <- cleanPlayerSalary(playerSalay_2017)
# Dataframe Creation
source("DataWrangling/createCompleteDataframe.R")
# Load Data (Player Salary: 2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
# Load Data (Player Season Metrics)
playerSeasonMetrics<-read.csv("Data/PlayerMetrics_Season/player_metric_season.csv", stringsAsFactors = FALSE)
test <- cleanPlayerSalary(playerSalay_2017)
playerSalay_2017<-read.csv("Data/PlayerSalary_Season/salary_2017.csv", stringsAsFactors = FALSE)
test <- playerSalay_2017 %>% group_by(Player) %>% summarise(Salary = sum(Salary))
View(test)
=======
possage<- table(poss__all_data$age_cat, poss__all_data$Major_Crime_Type)
assaultage<- table(assault__all_data$age_cat, assault__all_data$Major_Crime_Type)
table_agecat<- cbind(duiage, possage, assaultage)
table_agecat
chisq.test(table_agecat)
table_agecat = table_agecat[-c(1,6),]
table_agecat
table_agecat = table_agecat[-c(1,5),]
table_agecat
table_agecat<- cbind(duiage, possage, assaultage)
table_agecat = table_agecat[-c(1,5),]
table_agecat
chisq.test(table_agecat)
chisq.test(table_dui_poss) #fail to reject the null hypothesis
chisq.test(table_dui_poss_ass) #SUPER fail to reject.....??
chisq.test(table_agecat) #reject the null!
tbl2
bargraph(tbl2)
barplot(tbl2)
barplot(tbl2)
plot(tbl2)
barplot(tbl2)
tbl2
sum(data$age_cat == "4")
dim(data)
sum(data$age_cat == "4")/55382
age4<- data$age_cat == "4"
age4<- data[data$age_cat == "4",]
View(age4)
max(age4$age)
min(age4$age)
tbl2= table(data$Major_Crime_Type, data$age_cat)
tbl2 = tbl2[,-c(1,6)]#only misdemeandor and felony
#tbl2 = t(tbl2)
#plot(tbl2, legend.text = T, main = "Frequency of Arrests by Age Category", ylab = "Count of Arrests", xlab = "Crime")
chisq.test(t(tbl2))
barplot(tbl2)
barplot(TABLE, main = "Male vs. Female Arrests By Crime", ylab = "Count of Arrests")
#Crime vs Gender
tbl = table(data$Major_Crime_Type, data$sex)
head(tbl)
chisq.test(tbl) #low p-value --> gender is not independent
TABLE<- table(data$sex, data$Major_Crime_Type)
barplot(TABLE, main = "Male vs. Female Arrests By Crime", ylab = "Count of Arrests")
#chi square test - top 3 crimes by gender
duitable<- table(dui__all_data$sex,dui__all_data$Major_Crime_Type)
posstable<- table(poss__all_data$sex, poss__all_data$Major_Crime_Type)
table_dui_poss<- cbind(duitable,posstable)
table_dui_poss
chisq.test(table_dui_poss) #fail to reject the null hypothesis
#add #3 assault
assaulttable<- table(assault__all_data$sex, assault__all_data$Major_Crime_Type)
table_dui_poss_ass<- cbind(table_dui_poss, assaulttable)
chisq.test(table_dui_poss_ass) #SUPER fail to reject.....??
table_dui_poss_ass
chisq.test(table_dui_poss_ass)
tbl2= table(data$Major_Crime_Type, data$age_cat)
tbl2 = tbl2[,-c(1,6)]#only misdemeandor and felony
#tbl2 = t(tbl2)
#plot(tbl2, legend.text = T, main = "Frequency of Arrests by Age Category", ylab = "Count of Arrests", xlab = "Crime")
chisq.test(t(tbl2))
barplot(tbl2)
sum(data$age_cat == "4")/55382
data$age_cat == "4"
data$age_cat
sum(data$age_cat == "4")
#tbl2 = t(tbl2)
#plot(tbl2, legend.text = T, main = "Frequency of Arrests by Age Category", ylab = "Count of Arrests", xlab = "Crime")
tbl2
chisq.test(t(tbl2))
duiage<- table(dui__all_data$age_cat, dui__all_data$Major_Crime_Type)
possage<- table(poss__all_data$age_cat, poss__all_data$Major_Crime_Type)
assaultage<- table(assault__all_data$age_cat, assault__all_data$Major_Crime_Type)
table_agecat<- cbind(duiage, possage, assaultage)
table_agecat = table_agecat[-c(1,5),]
chisq.test(table_agecat) #reject the null!
table_agecat
table_aov<- data.frame(data$id,data$age)
table_aov
head(table_aov)
table_aov<- table(data$id,data$age)
head(table_aov)
data_id<- c(data$id)
data_id
data_age<- c(data$age)
as.table.default(data_id,data_age)
table_aov<- as.table.default(data_id,data_age)
head(table_aov)
barplot(TABLE, main = "Male vs. Female Arrests By Crime", ylab = "Count of Arrests")
barplot(TABLE, main = "Male vs. Female Arrests By Crime", ylab = "Count of Arrests", legend(T))
barplot(TABLE, main = "Male vs. Female Arrests By Crime", ylab = "Count of Arrests", legend.text = T)
barplot(TABLE, main = "Male vs. Female Arrests By Crime", ylab = "Count of Arrests", legend.text = T)
View(BloodPressure)
View(BloodPressure)
1+1;
cor(Returns$GOOG, Returns$AMZN)
## we calculate arithmetic returns using the diff function
## since the diff() function leads to a vector that is an element short
## of the original vector, we remove the last element from the vector
## in the denominator by using the construction a[-length(a)]
Returns <- data.frame(GOOG = diff(tmp[,1])/tmp[,1][-length(tmp[,1])],
AMZN = diff(tmp[,2])/tmp[,2][-length(tmp[,2])])
library(quantmod) ## make sure that you have installed this library
tmpSPX <- getSymbols(c('GOOG'), src='yahoo');
tmpAmazon <- getSymbols(c('AMZN'), src='yahoo');
PriceData <- data.frame(Date=index(GOOG), #index() guarantees Date format
GOOG=as.numeric(GOOG[,6]),
AMZN = as.numeric(AMZN[,6]))
## to create the returns we need to first create a matrix
tmp <- as.matrix(PriceData[,c(2,3)])
## we calculate arithmetic returns using the diff function
## since the diff() function leads to a vector that is an element short
## of the original vector, we remove the last element from the vector
## in the denominator by using the construction a[-length(a)]
Returns <- data.frame(GOOG = diff(tmp[,1])/tmp[,1][-length(tmp[,1])],
AMZN = diff(tmp[,2])/tmp[,2][-length(tmp[,2])])
## we add a Date variable to returns
Returns <- cbind(Date=PriceData$Date[-1], Returns)
## calculate the mean and standard deviation of the logarithmic
## returns of Google and Amazon and their correlation
100*mean(Returns$GOOG)
100*sd(Returns$GOOG)
100*mean(Returns$AMZN)
100*sd(Returns$AMZN)
cor(Returns$GOOG, Returns$AMZN)
100*mean(0.5*Returns$GOOG + 0.5*Returns$AMZN)
100*sd(0.5*Returns$GOOG + 0.5*Returns$AMZN)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
attach(Boston)
Boston
boston = Boston
View(boston)
boston = Boston
boston = Boston
#Question One
```{r question1,  echo = FALSE}
#Question One
```{r example1, echo = FALSE}
boston = data.frame(Boston)
boston = data.frame(Boston)
attach(Boston)
boston = data.frame(Boston)
print(nrow(boston),quote=FALSE)
ncol(boston)
print("Number of Rows in Boston:")
nrow(boston)
print("Number of Columns in Boston:")
ncol(boston)
print("Number of Columns in Boston:" + 5)
print("Number of Columns in Boston:" + toString(nrow(boston)))
print("Number of Rows in Boston:")
nrow(boston)
print("Number of Columns in Boston:")
ncol(boston)
```{r echo=FALSE}
print("Number of Rows in Boston:")
nrow(boston)
print("Number of Columns in Boston:")
ncol(boston)
print("Number of Rows in Boston:")
nrow(boston)
print("Number of Columns in Boston:")
ncol(boston)
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(boston, pch = 19,  cex = 0.5,
col = my_cols[iris$Species],
lower.panel=NULL)
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(boston, pch = 19,  cex = 0.5,
col = my_cols[iris$Species],
lower.panel=NULL)
View(boston)
View(boston)
pairs(boston[,7:9], pch = 19,  cex = 0.5,
col = my_cols[iris$Species],
lower.panel=NULL)
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(boston[,7:9], pch = 19,  cex = 0.5,
col = my_cols[iris$Species],
lower.panel=NULL)
pairs(boston[,7:9], pch = 19, lower.panel = NULL)
pairs(boston[,13:14], pch = 19, lower.panel = NULL)
plot(boston$crim,boston$chas)
plot(boston$crim,boston$chas)
#pairs(boston[,13:14], pch = 19, lower.panel = NULL)
plot(boston$crim,boston$chas)
#pairs(boston[,13:14], pch = 19, lower.panel = NULL)
plot(boston$crim,boston$chas)
#pairs(boston[,13:14], pch = 19, lower.panel = NULL)
plot(boston$crim,boston$chas)
?Boston
#crim vs indus plot
plot(boston$crim,boston$indus, main="Scatterplot Crime Per Capita vs Non Retail Business Acres",
xlab="Crime Per Capita ", ylab="Proportion of Non-Retail Business Acres Per Town")
#crim vs indus plot
plot(boston$tax,boston$medv, main="Scatterplot Crime Per Capita vs Non Retail Business Acres",
xlab="Crime Per Capita ", ylab="Proportion of Non-Retail Business Acres Per Town")
#tax vs medv plot
plot(boston$tax,boston$medv,
main="Scatterplot of Full-Value Property Tax Rate vs Median Value of Owner Occupied Homes",
xlab="Full Value Property-Tax Rate Per $10,000",
ylab="Median Value of Owner Occupied Homes")
#tax vs medv plot
plot(boston$tax,boston$medv,
main="Scatterplot of Property Tax Rate vs Median Value of Homes",
xlab="Full Value Property-Tax Rate Per $10,000",
ylab="Median Value of Owner Occupied Homes")
#tax vs medv plot
plot(boston$tax,boston$medv,
main="Scatterplot of Property Tax Rate vs Median Value of Homes",
xlab="Full Value Property-Tax Rate",
ylab="Median Value of Owner Occupied Homes")
#tax vs medv plot
plot(boston$tax,boston$medv,
main="Scatterplot of Property Tax Rate vs Median Value of Homes",
xlab="Full Value Property-Tax Rate",
ylab="Value of Owner Occupied Homes")
#tax vs medv plot
plot(boston$crim,boston$dis,
main="Scatterplot of Property Tax Rate vs Median Value of Homes",
xlab="Full Value Property-Tax Rate",
ylab="Value of Owner Occupied Homes")
#tax vs medv plot
plot(boston$dis,boston$crim,
main="Scatterplot of Property Tax Rate vs Median Value of Homes",
xlab="Full Value Property-Tax Rate",
ylab="Value of Owner Occupied Homes")
#tax vs medv plot
plot(boston$dis,boston$crim,
main="Scatterplot of Distance to Jobs vs Crime Per Capita",
xlab="Mean of Distances to Employment Centers",
ylab="Crime Rate Per Capita")
pairs(boston[,1:4], pch = 19, lower.panel = NULL)
pairs(boston, pch = 19, lower.panel = NULL)
pairs(boston, pch = 19, lower.panel = NULL)
?Boston
help(Boston)
library(MASS)
boston = data.frame(Boston)
?Boston
#tax vs medv plot
plot(boston$tax,boston$medv,
main="Scatterplot of Property Tax Rate vs Median Value of Homes",
xlab="Full Value Property-Tax Rate",
ylab="Value of Owner Occupied Homes")
#tax vs medv plot
plot(boston$crim,boston$black,
main="Scatterplot of Property Tax Rate vs Median Value of Homes",
xlab="Full Value Property-Tax Rate",
ylab="Value of Owner Occupied Homes")
pairs(boston, pch = 19, lower.panel = NULL)
plot(boston$crim,boston$medv)
plot(boston$crim, boston$lstat)
plot(boston$crim, boston$black)
plot(boston$medv,boston$crim)
plot(boston$lstat, boston$crim)
plot(boston$black, boston$crim)
plot(boston$medv,boston$crim,
main = "Median Home Value VS. Crime Per Capita")
frequency(boston$black)
plot(boston$black)
hist(boston$black)
max(boston$crim)
min(boston$crim)
range(boston$crim)
boxplot(boston)
boxplot(boston$crim, boston$tax, boston$ptratio)
boxplot(boston$crim)
boxplot(boston$tax)
boxplot(boston$ptratio)
plot(bosotn$crim)
plot(boston$crim)
plot(boston$tax)
plot(boston$crim)
sum(boston$chas)
median(boston$ptratio)
min(boston$medv)
boston$medv == min(boston$medv)
ind <- boston$medv == min(boston$medv)
ind
medvalue <- c(boston$medv)
ind <- medvalue == min(medvalue)
ind
ind <- medvalue == (min(medvalue))
ind
ind <- (min(medvalue)) == medvalue
ind
low <- min(boston$medv)
medvalue <- c(boston$medv)
ind <- low == medvalue
ind
haystack <- c(1, 2, 4, 3, 4)
needle <- 4
indices <- needle == haystack
indices
indices <- needle = haystack
indices
ind <- which(low == medvalue)
ind
crime <- boston$crim[ind]
crime
ratio <- boston$ptratio[ind]
sum(boston$chas)
summary(boston$ptratio)
boston[ind]
boston[ind,]
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/UT MSBA 2020-21/RStudioWorkingDirectory/Predictive Modeling")
finalschamps <-  read.csv("datasets_1470_72253_championsdata.csv")
finalsrunup <- read.csv("datasets_1470_72253_runnerupsdata.csv")
View(finalschamps)
View(finalsrunup)
PlayerSalaries <- read.csv("~/Documents/UT MSBA 2020-21/RStudioWorkingDirectory/Predictive Modeling/PlayerSalaries.csv")
View(PlayerSalaries)
salaris <- PlayerSalaries[,"Season.Start" == 2017]
salaries <- PlayerSalaries[,"Season.Start" == 2017]
salaries
salaries <- PlayerSalaries[:,"Season.Start" == 2017]
salaries <- PlayerSalaries["Season.Start" == 2017,]
salaries
salaries <- PlayerSalaries["Season.Start" == 2017, ]
salaries <- PlayerSalaries[, ]
salaries <- which(PlayerSalaries$Season.Start == 2017)
salaries
salaries <- c(which(PlayerSalaries$Season.Start == 2017))
salarydf <- PlayerSalaries[salaries,]
View(salarydf)
#dataframe of players in 2017
indexyear <- c(which(PlayerSalaries$Season.Start == 2017))
salarydf <- PlayerSalaries[salaries,]
typeof(salarydf$Salary.in..)
salarydf[ ,(3):=as.numeric(gsub("[$,]","",.SD[,3]))
salarydf[ ,(3):=as.numeric(gsub("[$,]","",.SD[,3]))]
salarydf[ ,(3):=as.numeric(gsub("[$,]","",.SD[,3]))]
# replace $ with blank "" in the df$payment column.  and coerce that result to numeric
salarydf$Salary.in.. = as.numeric(gsub("\\$", "", salarydf$Salary.in..))
View(salarydf)
#dataframe of players in 2017
indexyear <- c(which(PlayerSalaries$Season.Start == 2017))
salarydf <- PlayerSalaries[salaries,]
salarydf$Salary.in.. <- as.numeric(gsub('[$,]', '', salarydf$Salary.in..))
typeof(salarydf$Salary.in..)
typeof(salarydf$Salary.in..[3,])
typeof(salarydf$Salary.in..[3,3])
typeof(salarydf$Salary.in..[,3])
typeof(salarydf$Salary.in..[3,])
typeof(salarydf$Salary.in..(3))
typeof(salarydf$Salary.in..(3,))
plot(salarydf$Salary.in..)
#compare team salaries
select_teams <- c(salarydf$Team)
sal <- salarydf[salarydf$Team %in% select_teams,] # keeping those in the set
sal$Team <- factor(sal$Team) #refactoring to eliminate empty levels.
View(sal)
boxplot(sal$Salary.in.. ~ sal$Team)
#summary of salaries
summary(salarydf$Salary.in..)
#summary of salaries
mia <- salarydf[Team == 'MIA']
#summary of salaries
mia <- salarydf[salarydf$Team == 'MIA']
salarydf$Team == 'MIA'
justmia<- c(salardf$Team == 'MIA')
justmia<- c(salarydf$Team == 'MIA')
summary(salarydf$Salary.in.. %in% justmia
miami <- salarydf[salarydf$Salary.in.. %in% justmia]
justmia<- c(salarydf$Team == 'MIA')
miami <- salarydf[salarydf$Salary.in.. %in% justmia]
summary(miami$Salary.in..)
View(miami)
#summary of salaries
justmiami <- c(which(salarydf$Team == 'MIA'))
salarydf <- salarydf[justmiami,]
#dataframe of players in 2017
indexyear <- c(which(PlayerSalaries$Season.Start == 2017))
salarydf <- PlayerSalaries[salaries,]
#summary of salaries
justmiami <- c(which(salarydf$Team == 'MIA'))
miami <- salarydf[justmiami,]
View(miami)
summary(miami$Salary.in..)
summary(miami$Salary.in..)
#change salaries to integers
salarydf$Salary.in.. <- as.numeric(gsub('[$,]', '', salarydf$Salary.in..))
#summary of salaries
justmiami <- c(which(salarydf$Team == 'MIA'))
miami <- salarydf[justmiami,]
summary(miami$Salary.in..)
#summary of salaries
salarydf$Salary.in..
#summary of salaries
summary(salarydf$Salary.in..)
summary(miami$Salary.in..)
House = read.table("housedata.txt",header=T)
#With attach you can call the columns of the df as objects
#Beware with this function! Be sure to NOT create objects with the same name
#as the name of the columns of the data frame (df).
attach(House)
#Scatterplot
plot(Size,Price,
pch=19) #Type of point
#OLS model
Housemodel = lm(Price~Size,data=House)
#Summary of the model
summary(Housemodel)
#Which kind of information is stored inside the model?
names(Housemodel)
names(summary(Housemodel))
#Confidence interval for coefficients
confint(Housemodel) #Default is 95%
confint(Housemodel,level=0.99) #You can change the level of confidence
#Creating data frame for prediction
#House size from 0 to 8
Xfuture <- data.frame(Size=seq(0,8,by=0.01))
#Calculating 95% and 99% prediction interval
Future1 = predict(Housemodel, Xfuture,
interval = "prediction",se.fit=T)
Future2 = predict(Housemodel, Xfuture,
interval = "prediction",se.fit=T,level=0.99)
#Plotting the model
plot(Size,Price, #The data
xlim=c(0,8), #the range of my predicted X
ylim=range(Future1$fit), #Range of my fit
pch=19, #Type of point
cex.lab=1.3) #Size of lab
abline(lsfit(Size,Price), #lsfit can be used instead of lm()
lwd=2, #Line width
col=2) #Line color
lines(Xfuture$Size,Future1$fit[,2], #Lines of 95% prediction interval
col=4, #Color of line
lwd=2, #Line width
lty=2) #Line type
lines(Xfuture$Size,Future1$fit[,3], #Lines of 95% prediction interval
col=4,lwd=2,lty=2)
lines(Xfuture$Size,Future2$fit[,2], #Lines of 99% prediction interval
col=5,lwd=2,lty=2)
lines(Xfuture$Size,Future2$fit[,3], #Lines of 99% prediction interval
col=5,lwd=2,lty=2)
#BEWARE
rm(list=ls()) #Removes every object from your environment
miaokc <- merge(someteams,otherteams,by="Tm")
#SIDE BY SIDE BAR CHART
#subset for a few teams
someteams <- DATA[which(DATA$Tm=='MIA'),]
DATA <- read.csv("2017_player_salary_and_metrics.csv")
setwd("~/Documents/UT MSBA 2020-21/RStudioWorkingDirectory/Predictive Modeling")
setwd("~/Documents/UT MSBA 2020-21/RStudioWorkingDirectory/Predictive Modeling/predictiveModelingSportsAnalytics")
DATA <- read.csv("2017_player_salary_and_metrics.csv")
library(ggplot2)
library(plyr)
#SIDE BY SIDE BAR CHART
#subset for a few teams
someteams <- DATA[which(DATA$Tm=='MIA'),]
otherteams <- DATA[which(DATA$Tm=='OKC'),]
ggplot(data=someteams, aes(x=Tm, y=salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge())
miaokc <- merge(someteams,otherteams,by="Tm")
miaokc <- merge(someteams,otherteams)
#SIDE BY SIDE BAR CHART
#subset for a few teams
someteams <- DATA[which(DATA$Tm=='MIA'),]
otherteams <- DATA[which(DATA$Tm=='OKC'),]
miaokc <- merge(someteams,otherteams)
miaokc <- rbind(someteams,otherteams)
View(miaokc)
ggplot(data=miaokc, aes(x=Tm, y=salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge())
sidebyside <- function(team1, team2){
someteams <- DATA[which(DATA$Tm==team1),]
otherteams <- DATA[which(DATA$Tm==team2),]
both <- rbind(someteams,otherteams)
bothgroups<- ggplot(data=both, aes(x=Tm, y=salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge())
bothgroups
}
sidebyside('MIA', 'HOU')
sidebyside <- function(team1, team2){
someteams <- DATA[which(DATA$Tm==team1),]
otherteams <- DATA[which(DATA$Tm==team2),]
both <- rbind(otherteams,someteams)
bothgroups<- ggplot(data=both, aes(x=Tm, y=salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge())
bothgroups
}
sidebyside('MIA', 'HOU')
sidebyside <- function(teams,number){
someteams <- DATA[which(DATA$Tm==teams(1)),]
for (i in number){
otherteams<- DATA[which(DATA$Tm==teams(i+1))]
both <- rbind(someteams, otherteams)
}#end of for loop
bothgroups<- ggplot(data=both, aes(x=Tm, y=salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge())
bothgroups
}
sidebyside(('MIA', 'HOU'),2)#practice
sidebyside(c('MIA','HOU'),2)#practice
debugSource('~/Documents/UT MSBA 2020-21/RStudioWorkingDirectory/Predictive Modeling/NBAProjectData_Finals.R')
sidebyside <- function(team1, team2){
someteams <- DATA[which(DATA$Tm==team1),]
otherteams <- DATA[which(DATA$Tm==team2),]
both <- rbind(someteams,otherteams)
bothgroups<- ggplot(data=both, aes(x=Tm, y=salary, fill=Pos)) +
geom_bar(stat="identity", position=position_dodge())
bothgroups
}
sidebyside('MIA', 'HOU')#practice
sidebyside('MIA', 'HOU')#practice
#summary of values
summary(DATA$FGA)
>>>>>>> origin/master
